
                         KEYPAD AND LCD INTERFACING   :

CODING:

#include <pic.h>
#include <stdio.h>  // Include for sprintf

__CONFIG(FOSC_HS & WDTE_OFF & PWRTE_OFF & CP_OFF & BOREN_ON & LVP_OFF & CPD_OFF & WRT_OFF & DEBUG_OFF);

#define rs RD2
#define en RD3

#define R1 RB0
#define R2 RB1
#define R3 RB2
#define R4 RB3
#define C1 RB4
#define C2 RB5
#define C3 RB6
#define C4 RB7																						

void lcd_init();
void cmd(unsigned char a);
void dat(unsigned char b);
void show(unsigned char *s);
void lcd_delay();
void clear_input_str(char *str, size_t size);

unsigned char key();
void keyinit();

unsigned char keypad[4][4] = {
    {'7', '8', '9', '/'},
    {'4', '5', '6', '*'},
    {'1', '2', '3', '-'},
    {'C', '0', '=', '+'}
};

unsigned char rowloc, colloc;
unsigned int total_amount = 0;
unsigned int current_input = 0;
unsigned char digit_count = 0;
char operation = 0;  // Store the current operation

void main()
{
    TRISD = 0;
    lcd_init();
    keyinit();
    cmd(0x80);
    show("  Enter Amount  ");
    
    char input_str[5] = "    ";  // Buffer for the display
    while (1)
    {
        cmd(0xc0);  // Move cursor to second line
        unsigned char b = key();

        if (b >= '0' && b <= '9') {
            if (digit_count < 4) {  // Allow up to 4 digits
                current_input = current_input * 10 + (b - '0');  // Build current input
                input_str[digit_count] = b;  // Add the digit to the buffer
                digit_count++;
                input_str[digit_count] = '\0';  // Null-terminate the string
current 
                // Clear previous input display
                cmd(0xc0);  // Move cursor to second line
                show(input_str);  // Display the input
            }
        }
        else if (b == '+' || b == '-' || b == '*' || b == '/') {
            if (operation == 0) {  // If no operation is set
                total_amount = current_input;  // Set total_amount to the first input
            } else {
                // Perform the previous operation
                switch (operation) {
                    case '+':
                        total_amount += current_input;
                        break;
                    case '-':
                        total_amount -= current_input;
                        break;
                    case '*':
                        total_amount *= current_input;
                        break;
                    case '/':
                        if (current_input != 0) {  // Prevent division by zero
                            total_amount /= current_input;
                        } else {
                            cmd(0x01);  // Clear display
                            show("Error: Div 0! "); // Show error message
                            lcd_delay();  // Short delay
                            cmd(0x80);  // Move cursor back to the top
                        }
                        break;
                }
            }
            operation = b;  // Store the current operation
            current_input = 0;  // Reset current input
            digit_count = 0;  // Reset digit count
            clear_input_str(input_str, sizeof(input_str) - 1);  // Clear buffer
            input_str[4] = '\0';  // Null-terminate the string
            cmd(0xc0);
            show("Enter Next Num ");  // Prompt for next number
            lcd_delay();  // Short delay
            cmd(0x80);  // Move cursor back to the top
        }
        else if (b == '=') {
            // Perform the last operation if needed
            if (operation != 0) {
                switch (operation) {
                    case '+':
                        total_amount += current_input;
                        break;
                    case '-':
                        total_amount -= current_input;
                        break;
                    case '*':
                        total_amount *= current_input;
                        break;
                    case '/':
                        if (current_input != 0) {
                            total_amount /= current_input;
                        } else {
                            cmd(0x01);  // Clear display
                            show("Error: Div 0! ");
                            lcd_delay();
                            cmd(0x80);
                            continue;  // Skip the rest and wait for another input
                        }
                        break;
                }
            }
            cmd(0x01);  // Clear display
            show(" Total:      ");
            cmd(0xc0);
            // Display total amount (convert to string)
            char total_str[5];
            sprintf(total_str, "%4d", total_amount);
            show(total_str);  // Display total
            lcd_delay();  // Short delay
            cmd(0x80);  // Move cursor back to the top
            // Reset for next calculation
            total_amount = 0;
            current_input = 0;
            digit_count = 0;
            operation = 0;
        }
        else if (b == 'C') {
            // Clear current input and reset
            total_amount = 0;
            current_input = 0;
            digit_count = 0;
            operation = 0;  // Reset operation
            clear_input_str(input_str, sizeof(input_str) - 1);  // Clear buffer
            input_str[4] = '\0';  // Null-terminate the string
            cmd(0xc0);
            show("Cleared!     ");
            lcd_delay();  // Short delay
            cmd(0x80);  // Move cursor back to the top
        }
    }   
}

void lcd_init()
{
    cmd(0x02);
    cmd(0x28);
    cmd(0x0e);
    cmd(0x06);
    cmd(0x80);
}

void cmd(unsigned char a)
{
    rs = 0; 
    PORTD &= 0x0F;
    PORTD |= (a & 0xf0);
    en = 1;
    lcd_delay();
    en = 0;
    lcd_delay();
    PORTD &= 0x0f;
    PORTD |= (a << 4 & 0xf0);
    en = 1;
    lcd_delay();
    en = 0;
    lcd_delay();
}

void dat(unsigned char b)
{                                   
    rs = 1; 
    PORTD &= 0x0F;
    PORTD |= (b & 0xf0);
    en = 1;
    lcd_delay();
    en = 0;
    lcd_delay();
    PORTD &= 0x0f;
    PORTD |= (b << 4 & 0xf0);
    en = 1;
    lcd_delay();
    en = 0;
    lcd_delay();
}

void show(unsigned char *s)
{
    while (*s) {
        dat(*s++);
    }
}

void lcd_delay()
{
    unsigned int lcd_delay;
    for (lcd_delay = 0; lcd_delay <= 1000; lcd_delay++);
}

void clear_input_str(char *str, size_t size) {
    for (size_t i = 0; i < size; i++) {
        str[i] = ' ';  // Fill with spaces
    }
    str[size] = '\0';  // Null-terminate the string
}

void keyinit()
{
    TRISB = 0XF0;
    OPTION_REG &= 0X7F;  // ENABLE PULL UP
}

unsigned char key()
{
    PORTB = 0X00;
    while (C1 && C2 && C3 && C4);
    while (!C1 || !C2 || !C3 || !C4) {
        R1 = 0; R2 = R3 = R4 = 1;
        if (!C1 || !C2 || !C3 || !C4) {
            rowloc = 0;
            break;
        }
        R2 = 0; R1 = 1;
        if (!C1 || !C2 || !C3 || !C4) {
            rowloc = 1;
            break;
        }
        R3 = 0; R2 = 1;
        if (!C1 || !C2 || !C3 || !C4) {
            rowloc = 2;
            break;
        }
        R4 = 0; R3 = 1;
        if (!C1 || !C2 || !C3 || !C4) {
            rowloc = 3;
            break;
        }
    }
    if (C1 == 0 && C2 != 0 && C3 != 0 && C4 != 0)
        colloc = 0;
    else if (C1 != 0 && C2 == 0 && C3 != 0 && C4 != 0)
        colloc = 1;
    else if (C1 != 0 && C2 != 0 && C3 == 0 && C4 != 0)
        colloc = 2;
    else if (C1 != 0 && C2 != 0 && C3 != 0 && C4 == 0)
        colloc = 3;
    while (C1 == 0 || C2 == 0 || C3 == 0 || C4 == 0);
    return (keypad[rowloc][colloc]);
}
